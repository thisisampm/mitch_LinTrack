function [pc_tuning_curve_matrix_ref, pc_tuning_curve_mtx_all] = place_cell_tuning(session_files, cell_regist_mtx,traces_type, reference_session, place_cell_only)
% plot the tuning curves of cells that are common across all session files
% sort rows by peak with reference to session number sort_by_sesh

% details
num_spatial_bins = 40;
%traces_type = 2; % S, C, RAW

% input
num_sessions = size(session_files,1);

% iterate through sessions computing tuning curves for all cells
pc_tuning_curve_mtx_all = nan(size(cell_regist_mtx,1), num_spatial_bins, num_sessions);

% Display group and name of mouse being analyzed
session_name = regexp(session_files{1},filesep,'split'); % Split the filename into the parts at the file seperator for plot labeling.
fprintf('Calculating spatial tuning for %s Mouse %s\n', session_name{end-2},session_name{end-1});

for isesh = 1:num_sessions
    
    % print update
    disp(['Starting session ' num2str(isesh)])
    
    %If session dropped, cell_reg matrix has NaNs, skip to next session
    if isnan(sum(cell_regist_mtx(:,isesh)))
        disp(['Skipping session ', num2str(isesh), 'due to NaN in Cell Registration indicating low N session']); % If a session had low N neurons, I registered the other sessions and inserted a column of NaNs for that session
        continue
    end
    
    % load session
    if place_cell_only == 1
        load(session_files{isesh}, 'behavior_mtx', 'traces','place_cell_mtx')
        if ~exist('place_cell_mtx','var')
            place_cell_mtx = nan(size(traces,1),2);
            [~, place_cell_mtx(:,2)] = information_score(behavior_mtx,traces,traces_type);
        end
    else
        load(session_files{isesh}, 'behavior_mtx', 'traces')
    end
    session_name = regexp(session_files{isesh},filesep,'split'); % Split the filename into the parts at the file seperator for plot labeling.

    
    % load tuning curves
    % inside sort_cell_activity you can set to use L and R runs seperately,
    % may need to change some preallocated matrices slightly 
    %[~, unsorted_session_tuning_curves] = sort_cell_activity(behavior_mtx, traces,traces_type, num_spatial_bins);
    [~, unsorted_session_tuning_curves] = sort_cell_activity_prefDir(behavior_mtx, traces, traces_type, num_spatial_bins);
    
    axh = gca; % Capture the axis handle generated by sort_cell_activity
    
    % Individual session tuning plots
    if place_cell_only == 1
        sgtitle([{[session_name{end-2}, ' ',session_name{end-1}, ' ',session_name{end}],  'Place Cell Spatial Tuning'}]) % Use the separated file parts to title each session plot
        place_cell_index = place_cell_mtx(:,2) == 1; % place_cell_mtx, column 2 indicates if place cell criteria met
        imh = get(axh,'Children'); % Get the image handle for the current iteration axis
        pc_tuning = unsorted_session_tuning_curves(place_cell_index,:); % Restrict data to place cells
        [~, pc_sort] = sort_rows_by_peak(pc_tuning); % Sort by peak activity
        set(imh,'Cdata', norm_mtx(pc_tuning(pc_sort,:)')'); % Replot only the data of place cells.
        axis(axh,'tight');
    else
        sgtitle([{[session_name{end-2}, ' ',session_name{end-1}, ' ',session_name{end}],  'All Cell Spatial Tuning'}])
    end
        
    
    % common cells only
    % Cell reg output is cell x session matrix. Inactive cells on a session are denoted as 0
    current_session_cells = cell_regist_mtx(:,isesh) > 0; % Logical index of the active cells for current session
    detected_cell_order = cell_regist_mtx(current_session_cells,isesh); % Ordered map of active cell identities
    
    if place_cell_only == 1
        place_cell_index = place_cell_mtx(:,2) == 1; % Index of place cells as ordered by cnmfe for current session
        sorted_pc_index = place_cell_index(detected_cell_order); % Sort the place cell index by the active cell index so can only assign cells that are active and place cells
        detected_place_cell_numbers = detected_cell_order(sorted_pc_index); % Get the number in CellReg corresponding to active place cells
        place_cell_output_position = ismember(cell_regist_mtx(:,isesh), detected_place_cell_numbers); % Create a logical matrix indicating to which rows in the output matrix the current session place cells are assigned
        pc_tuning_curve_mtx_all(place_cell_output_position,:,isesh) = unsorted_session_tuning_curves(detected_place_cell_numbers,:); % Active place cells to corresponding row in output matrix
    else
        pc_tuning_curve_mtx_all(current_session_cells,:,isesh) = unsorted_session_tuning_curves(detected_cell_order,:); % unsorted tuning 
    end
   
    % update figures
    %drawnow
end

% only include cells active during reference session
pc_tuning_curve_matrix_ref = pc_tuning_curve_mtx_all(~isnan(pc_tuning_curve_mtx_all(:,1,reference_session)),:,:);

% sort by peak
[~,sort_idx] = sort_rows_by_peak(pc_tuning_curve_matrix_ref(:,:,reference_session));
pc_tuning_curve_matrix_ref = pc_tuning_curve_matrix_ref(sort_idx,:,:);

% plot
figure;
for isesh = 1:num_sessions
   subplot(1,num_sessions,isesh)
   imagesc(zscore_mtx(pc_tuning_curve_matrix_ref(:,:,isesh)')')
   caxis([-1.5 1.5])
end
[mouse_id] = fileparts(session_files{1}); % First outputs of fileparts is folder path (2nd file name, 3rd file extension).
fp_parts = regexp(mouse_id,filesep,'split');
gname = fp_parts{end-1}; % Get group name
mname = fp_parts{end}; % Get mouse name
sgtitle([gname,' ',mname ' Spatial Tuning Sorted by Day 1 Activity'])

